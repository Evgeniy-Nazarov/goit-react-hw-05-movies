{"version":3,"file":"static/js/98.36ba8b6e.chunk.js","mappings":"qKAAO,IAAMA,EAAU,kC,gJCGjBC,EAAgB,mCAAG,WAAMC,GAAN,gFACjBC,EADiB,6CACgCD,GADhC,SAEAE,EAAAA,EAAAA,IAAUD,EAAU,CACzCE,OAAQ,CACNC,QAASN,EAAAA,KAJU,cAEjBO,EAFiB,yBAOhBA,EAASC,MAPO,2CAAH,sDAUtB,I,8DCVaC,EAAqBC,EAAAA,GAAAA,IAAH,uHAOlBC,GAA2BD,EAAAA,EAAAA,IAAOE,EAAAA,KAAPF,CAAH,0cAsBxBG,EAAwBH,EAAAA,GAAAA,IAAH,uEAKrBI,EAAuBJ,EAAAA,GAAAA,GAAH,iGAMpBK,EAAsBL,EAAAA,GAAAA,EAAH,mGAMnBM,EAAuBN,EAAAA,GAAAA,GAAH,mGAMpBO,EAAuBP,EAAAA,GAAAA,GAAH,mGAMpBQ,EAAuBR,EAAAA,GAAAA,GAAH,kLAUpBS,EAAuBT,EAAAA,GAAAA,GAAH,mMAUpBU,GAAyBV,EAAAA,EAAAA,IAAOE,EAAAA,KAAPF,CAAH,6O,SC6BnC,EA5FqB,WAAO,IAAD,IACjBW,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA0BE,EAAAA,EAAAA,UAAS,MAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAA0BF,EAAAA,EAAAA,UAAS,IAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAA4BJ,EAAAA,EAAAA,UAAS,QAArC,eAAOK,EAAP,KAAeC,EAAf,KACMC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,QAAM,oBAACH,EAASI,aAAV,aAAC,EAAgBC,YAAjB,QAAyB,KAyBhD,OAvBAC,EAAAA,EAAAA,YAAU,WACR,GAAIf,EAAS,CACXQ,EAAU,WACV,IAAMQ,EAAU,mCAAG,6GAEQpC,EAAiBoB,GAFzB,OAGE,QADXd,EAFS,UAIb+B,EAAAA,OAAAA,KAAY,0CACZT,EAAU,SAEK,OAAbtB,IACFkB,EAASlB,GACTsB,EAAU,aATG,gDAYfF,EAAS,EAAD,IACRE,EAAU,YAbK,yDAAH,qDAgBhBQ,GACD,CACF,GAAE,CAAChB,IAEW,SAAXO,GACK,oDAEM,YAAXA,GACK,SAACW,EAAA,EAAD,IAEM,aAAXX,GACK,wBAAKF,IAEC,aAAXE,GAEA,SAACnB,EAAD,WACE,iCACE,SAACE,EAAD,CAA0B6B,GAAIR,EAASS,QAAvC,sBAGA,SAAC5B,EAAD,CACE6B,IACwB,OAAtBlB,EAAMmB,YACF,+FADJ,yCAEsCnB,EAAMmB,aAE9CC,IAAKpB,EAAMqB,SAEb,UAAC/B,EAAD,WACGU,EAAMqB,MADT,KACkBrB,EAAMsB,aAAaC,MAAM,EAAG,GAD9C,QAGA,UAAChC,EAAD,0BACeS,EAAMwB,eAErB,SAAChC,EAAD,wBACA,SAACD,EAAD,UAAsBS,EAAMyB,YAC5B,SAAChC,EAAD,sBACA,SAACC,EAAD,UACGM,EAAM0B,OAAOC,KAAI,SAAAC,GAAK,OACrB,SAACjC,EAAD,UACGiC,EAAMC,MADkBD,EAAMlD,GADZ,OAMzB,SAACe,EAAD,sCACA,UAACC,EAAD,YACE,SAACC,EAAD,WACE,SAACC,EAAD,CAAwBoB,GAAG,OAA3B,qBAGF,SAACrB,EAAD,WACE,SAACC,EAAD,CAAwBoB,GAAG,UAA3B,2BAKJ,SAAC,EAAAc,SAAD,CAAUC,UAAU,SAAChB,EAAA,EAAD,IAApB,UACE,SAAC,KAAD,gBA5CV,CAkDD,C","sources":["components/Key/TMDBKey.js","components/API/FetchFilmsDetails.jsx","components/MovieDetails/StyledMovieLink.Styled.js","components/MovieDetails/MovieDetails.jsx"],"sourcesContent":["export const API_KEY = '7eb5059eee6f318692a5fcd674d6cc43';\n\n","import axios from 'axios';\nimport { API_KEY } from '../Key/TMDBKey';\n\nconst fetchFilmDetails = async id => {\n  const BASE_URL = `https://api.themoviedb.org/3/movie/${id}`;\n  const response = await axios.get(BASE_URL, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return response.data;\n};\n\nexport default fetchFilmDetails;\n","import { Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nexport const StyledMovieDetails = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    padding: 1rem;\n`;\n\nexport const StyledMovieDetailsGoBack = styled(Link)`\n    display: inline-block;\n    width: 100%;\n    padding: 0.5rem;\n    margin-bottom: 1rem;\n    border: 1px solid #0077FF;\n    border-radius: 4px;\n    background-color: #0077FF;\n    color: #fff;\n    font-size: 1rem;\n    text-decoration: none;\n    text-align: center;\n    cursor: pointer;\n    &:hover {\n        background-color: #006FE6;\n    }\n    &:focus {\n        outline: none;\n        border-color: #006FE6;\n    }\n`;\n\nexport const StyledMovieDetailsImg = styled.img`\n    display: block;\n    margin-bottom: 1rem;\n`;\n\nexport const StyledMovieDetailsH1 = styled.h1`\n    text-align: center;\n    font-size: 2rem;\n    margin-bottom: 1rem;\n`;\n\nexport const StyledMovieDetailsP = styled.p`\n    text-align: center;\n    font-size: 1.2rem;\n    margin-bottom: 1rem;\n`;\n\nexport const StyledMovieDetailsH2 = styled.h2`\n    text-align: center;\n    font-size: 1.5rem;\n    margin-bottom: 1rem;\n`;\n\nexport const StyledMovieDetailsH3 = styled.h3`\n    text-align: center;\n    font-size: 1.2rem;\n    margin-bottom: 1rem;\n`;\n\nexport const StyledMovieDetailsUl = styled.ul`\n    display: flex;\n    flex-wrap: wrap;\n    justify-content: center;\n    align-items: center;\n    padding: 0;\n    margin: 0;\n    list-style: none;\n`;\n\nexport const StyledMovieDetailsLi = styled.li`\n    display: flex;\n    flex-direction: column;\n    margin-bottom: 1rem;\n    margin-right: 1rem;\n    text-decoration: none;\n    color: black;\n    font-size: 1.2rem;\n`;\n\nexport const StyledMovieDetailsLink = styled(Link)`\n    display: flex;\n    flex-direction: column;\n    margin-bottom: 1rem;\n    text-decoration: none;\n    color: blue ;\n    font-size: 1.2rem;\n    font-weight: bold;\n    &:hover {\n        color: red;\n    }\n`;\n\n","import fetchFilmDetails from 'components/API/FetchFilmsDetails';\nimport { Loader } from 'components/Loader/Loader';\nimport { Report } from 'notiflix';\nimport { Suspense, useEffect, useRef, useState } from 'react';\nimport { Outlet, useLocation, useParams } from 'react-router-dom';\nimport {\n  StyledMovieDetails,\n  StyledMovieDetailsGoBack,\n  StyledMovieDetailsH1,\n  StyledMovieDetailsH2,\n  StyledMovieDetailsH3,\n  StyledMovieDetailsImg,\n  StyledMovieDetailsLi,\n  StyledMovieDetailsLink,\n  StyledMovieDetailsP,\n  StyledMovieDetailsUl,\n} from './StyledMovieLink.Styled';\n\nconst MovieDetails = () => {\n  const { movieId } = useParams();\n  const [movie, setMovie] = useState(null);\n  const [error, setError] = useState('');\n  const [status, setStatus] = useState('idle');\n  const location = useLocation();\n  const backLink = useRef(location.state?.from ?? '/');\n\n  useEffect(() => {\n    if (movieId) {\n      setStatus('pending');\n      const searchFilm = async () => {\n        try {\n          const response = await fetchFilmDetails(movieId);\n          if (response === null) {\n            Report.info('No results were found for your search.');\n            setStatus('Idle');\n          }\n          if (response !== null) {\n            setMovie(response);\n            setStatus('resolved');\n          }\n        } catch (error) {\n          setError(error);\n          setStatus('rejected');\n        }\n      };\n      searchFilm();\n    }\n  }, [movieId]);\n\n  if (status === 'idle') {\n    return <h1>Enter your search query</h1>;\n  }\n  if (status === 'pending') {\n    return <Loader />;\n  }\n  if (status === 'rejected') {\n    return <h1>{error}</h1>;\n  }\n  if (status === 'resolved') {\n    return (\n      <StyledMovieDetails>\n        <>\n          <StyledMovieDetailsGoBack to={backLink.current}>\n            Go back\n          </StyledMovieDetailsGoBack>\n          <StyledMovieDetailsImg\n            src={\n              movie.poster_path === null\n                ? 'https://www.publicdomainpictures.net/pictures/280000/velka/not-found-image-15383864787lu.jpg'\n                : `https://image.tmdb.org/t/p/w500${movie.poster_path}`\n            }\n            alt={movie.title}\n          />\n          <StyledMovieDetailsH1>\n            {movie.title} ({movie.release_date.slice(0, 4)})\n          </StyledMovieDetailsH1>\n          <StyledMovieDetailsP>\n            User Score: {movie.popularity}\n          </StyledMovieDetailsP>\n          <StyledMovieDetailsH2>Overview</StyledMovieDetailsH2>\n          <StyledMovieDetailsP>{movie.overview}</StyledMovieDetailsP>\n          <StyledMovieDetailsH3>Genres</StyledMovieDetailsH3>\n          <StyledMovieDetailsUl>\n            {movie.genres.map(genre => (\n              <StyledMovieDetailsLi key={genre.id}>\n                {genre.name}\n              </StyledMovieDetailsLi>\n            ))}\n          </StyledMovieDetailsUl>\n          <StyledMovieDetailsH3>Additional information</StyledMovieDetailsH3>\n          <StyledMovieDetailsUl>\n            <StyledMovieDetailsLi>\n              <StyledMovieDetailsLink to=\"cast\">Cast</StyledMovieDetailsLink>\n            </StyledMovieDetailsLi>\n\n            <StyledMovieDetailsLi>\n              <StyledMovieDetailsLink to=\"reviews\">\n                Reviews\n              </StyledMovieDetailsLink>\n            </StyledMovieDetailsLi>\n          </StyledMovieDetailsUl>\n          <Suspense fallback={<Loader />}>\n            <Outlet />\n          </Suspense>\n        </>\n      </StyledMovieDetails>\n    );\n  }\n};\n\nexport default MovieDetails;\n"],"names":["API_KEY","fetchFilmDetails","id","BASE_URL","axios","params","api_key","response","data","StyledMovieDetails","styled","StyledMovieDetailsGoBack","Link","StyledMovieDetailsImg","StyledMovieDetailsH1","StyledMovieDetailsP","StyledMovieDetailsH2","StyledMovieDetailsH3","StyledMovieDetailsUl","StyledMovieDetailsLi","StyledMovieDetailsLink","movieId","useParams","useState","movie","setMovie","error","setError","status","setStatus","location","useLocation","backLink","useRef","state","from","useEffect","searchFilm","Report","Loader","to","current","src","poster_path","alt","title","release_date","slice","popularity","overview","genres","map","genre","name","Suspense","fallback"],"sourceRoot":""}