{"version":3,"file":"static/js/272.972d7697.chunk.js","mappings":"6OAGMA,EAAW,mCAAG,WAAMC,GAAN,6EACD,4CADC,SAEKC,EAAAA,EAAAA,IADN,4CAC0B,CACzCC,OAAQ,CACNC,QAASC,EAAAA,EACTC,MAAOL,KALO,cAEZM,EAFY,yBAQXA,EAASC,KAAKC,SARH,2CAAH,sDAWjB,I,qDCqGA,EA7Ge,WAAO,IAAD,EACnB,GAA4BC,EAAAA,EAAAA,UAAS,MAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAAwCC,EAAAA,EAAAA,mBAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAA4BL,EAAAA,EAAAA,UAAS,QAArC,eAAOM,EAAP,KAAeC,EAAf,KACA,GAA0BP,EAAAA,EAAAA,UAAS,IAAnC,eAAOQ,EAAP,KAAcC,EAAd,KACMC,GAAWC,EAAAA,EAAAA,MACXpB,EAAW,UAAGa,EAAaQ,IAAI,eAApB,QAA+B,GAE1CC,EAAY,mCAAG,uFACnBN,EAAU,WACU,KAAhBhB,EAFe,uBAGjBuB,EAAAA,OAAAA,KAAY,kCACZP,EAAU,QAJO,mDAQMjB,EAAYC,GARlB,UASO,KADlBM,EARW,QASJkB,OATI,wBAUfR,EAAU,QACVO,EAAAA,OAAAA,QAAe,oBAXA,2BAcO,IAApBjB,EAASkB,SACXb,EAAUL,GACVU,EAAU,aAhBK,kDAmBjBE,EAAS,EAAD,IACRF,EAAU,YApBO,0DAAH,qDAwBZS,GAAiBC,EAAAA,EAAAA,UAAQ,WAC7B,OAAKhB,EAGEA,EAAOiB,QAAO,SAAAC,GAAK,OACxBA,EAAMC,MAAMC,cAAcC,SAAS/B,EAAY8B,cAAcE,OADrC,IAFjB,IAKV,GAAE,CAACtB,EAAQV,IAENiC,EAAc,SAAAC,GAElBpB,EADmBoB,EAAO,CAAEA,KAAAA,GAAS,CAAC,EACV,CAC1BC,MAAM,EACNC,SAAS,GAEZ,EAED,MAAe,SAAXrB,GAEA,4BACE,oCACA,kBACEsB,KAAK,OACLC,MAAOtC,GAAe,GACtBuC,SAAU,SAAAC,GAAC,OAAIP,EAAYO,EAAEC,OAAOH,YAASI,EAAlC,KAEb,mBAAQC,QAASrB,EAAjB,qBACA,SAAC,KAAD,OAIS,YAAXP,GACK,SAAC6B,EAAA,EAAD,IAEM,aAAX7B,GAEA,4BACE,oCACA,kBACEsB,KAAK,OACLC,MAAOtC,GAAe,GACtBuC,SAAU,SAAAC,GAAC,OAAIP,EAAYO,EAAEC,OAAOH,YAASI,EAAlC,KAEb,mBAAQC,QAASrB,EAAjB,qBACA,wBAAKL,KACL,SAAC,KAAD,OAIS,aAAXF,GAEA,4BACE,oCACA,kBACEsB,KAAK,OACLC,MAAOtC,GAAe,GACtBuC,SAAU,SAAAC,GAAC,OAAIP,EAAYO,EAAEC,OAAOH,YAASI,EAAlC,KAEb,mBAAQC,QAASrB,EAAjB,oBACCG,GACCf,EAAOmC,KAAI,SAAAjB,GAAK,OACd,2BACE,gBACEkB,IAAG,yCAAoClB,EAAMmB,aAC7CC,IAAKpB,EAAMC,SAEb,SAAC,EAAAoB,KAAD,CAAMC,GAAE,kBAAatB,EAAMuB,IAAMC,MAAO,CAAEC,KAAMlC,GAAhD,SACGS,EAAMC,UANFD,EAAMuB,GADD,KAWlB,SAAC,KAAD,YAtBN,CA0BD,C","sources":["components/API/FetchMovies.jsx","pages/Movies.jsx"],"sourcesContent":["import axios from 'axios';\nimport { API_KEY } from '../Key/TMDBKey';\n\nconst fetchMovies = async searchQuery => {\n  const BASE_URL = 'https://api.themoviedb.org/3/search/movie';\n  const response = await axios.get(BASE_URL, {\n    params: {\n      api_key: API_KEY,\n      query: searchQuery,\n    },\n  });\n  return response.data.results;\n};\n\nexport default fetchMovies;\n","import fetchMovies from 'components/API/FetchMovies';\nimport { Loader } from 'components/Loader/Loader';\nimport { Report } from 'notiflix';\nimport { useMemo, useState } from 'react';\nimport { Link, Outlet, useLocation, useSearchParams } from 'react-router-dom';\n\nconst Movies = () => {\n  const [movies, setMovies] = useState(null);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [status, setStatus] = useState('idle');\n  const [error, setError] = useState('');\n  const location = useLocation();\n  const searchQuery = searchParams.get('name') ?? '';\n\n  const searchMovies = async () => {\n    setStatus('pending');\n    if (searchQuery === '') {\n      Report.info('Please enter your search query');\n      setStatus('idle');\n      return;\n    }\n    try {\n      const response = await fetchMovies(searchQuery);\n      if (response.length === 0) {\n        setStatus('idle');\n        Report.failure('No results found');\n        return;\n      }\n      if (response.length !== 0) {\n        setMovies(response);\n        setStatus('resolved');\n      }\n    } catch (error) {\n      setError(error);\n      setStatus('rejected');\n    }\n  };\n\n  const filteredMovies = useMemo(() => {\n    if (!movies) {\n      return null;\n    }\n    return movies.filter(movie =>\n      movie.title.toLowerCase().includes(searchQuery.toLowerCase().trim())\n    );\n  }, [movies, searchQuery]);\n\n  const updateQuery = name => {\n    const nextParams = name ? { name } : {};\n    setSearchParams(nextParams, {\n      keep: true,\n      replace: true,\n    });\n  };\n\n  if (status === 'idle') {\n    return (\n      <div>\n        <h1>Movies</h1>\n        <input\n          type=\"text\"\n          value={searchQuery || ''}\n          onChange={e => updateQuery(e.target.value || undefined)}\n        />\n        <button onClick={searchMovies}>Search</button>\n        <Outlet />\n      </div>\n    );\n  }\n  if (status === 'pending') {\n    return <Loader />;\n  }\n  if (status === 'rejected') {\n    return (\n      <div>\n        <h1>Movies</h1>\n        <input\n          type=\"text\"\n          value={searchQuery || ''}\n          onChange={e => updateQuery(e.target.value || undefined)}\n        />\n        <button onClick={searchMovies}>Search</button>\n        <h2>{error}</h2>\n        <Outlet />\n      </div>\n    );\n  }\n  if (status === 'resolved') {\n    return (\n      <div>\n        <h1>Movies</h1>\n        <input\n          type=\"text\"\n          value={searchQuery || ''}\n          onChange={e => updateQuery(e.target.value || undefined)}\n        />\n        <button onClick={searchMovies}>Search</button>\n        {filteredMovies &&\n          movies.map(movie => (\n            <li key={movie.id}>\n              <img\n                src={`https://image.tmdb.org/t/p/w200${movie.poster_path}`}\n                alt={movie.title}\n              />\n              <Link to={`/movies/${movie.id}`} state={{ from: location }}>\n                {movie.title}\n              </Link>\n            </li>\n          ))}\n        <Outlet />\n      </div>\n    );\n  }\n};\n\nexport default Movies;\n"],"names":["fetchMovies","searchQuery","axios","params","api_key","API_KEY","query","response","data","results","useState","movies","setMovies","useSearchParams","searchParams","setSearchParams","status","setStatus","error","setError","location","useLocation","get","searchMovies","Report","length","filteredMovies","useMemo","filter","movie","title","toLowerCase","includes","trim","updateQuery","name","keep","replace","type","value","onChange","e","target","undefined","onClick","Loader","map","src","poster_path","alt","Link","to","id","state","from"],"sourceRoot":""}