{"version":3,"file":"static/js/619.24596fae.chunk.js","mappings":"uPAGMA,EAAc,mCAAG,WAAMC,GAAN,gFACfC,EADe,6CACkCD,EADlC,qBAEEE,EAAAA,EAAAA,IAAUD,EAAU,CACzCE,OAAQ,CACNC,QAASC,EAAAA,KAJQ,cAEfC,EAFe,yBAOdA,EAASC,KAAKC,MAPA,2CAAH,sDAUpB,I,oCCXaC,EAAaC,EAAAA,GAAAA,GAAH,yLAYVC,EAAeD,EAAAA,GAAAA,GAAH,gTAeZE,EAAgBF,EAAAA,GAAAA,IAAH,2MAWbG,EAAeH,EAAAA,GAAAA,GAAH,sHAOZI,EAAcJ,EAAAA,GAAAA,EAAH,sH,SCrCxB,EAAgCK,EAAQ,KAAhCC,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,UACVC,EAAcH,EAAQ,IAAtBG,UAkER,EAhEa,WACX,MAAwBF,EAAS,MAAjC,eAAOR,EAAP,KAAaW,EAAb,KACA,EAA4BH,EAAS,QAArC,eAAOI,EAAP,KAAeC,EAAf,KACA,EAA0BL,EAAS,IAAnC,eAAOM,EAAP,KAAcC,EAAd,KACQC,EAAYN,IAAZM,QAyBR,OAvBAP,GAAU,WACR,GAAIO,EAAS,CACXH,EAAU,WACV,IAAMI,EAAS,mCAAG,6GAES1B,EAAeyB,GAFxB,OAGU,KADlBlB,EAFQ,QAGDoB,SACXL,EAAU,QACVM,EAAAA,OAAAA,KAAY,kBAEU,IAApBrB,EAASoB,SACXP,EAAQb,GACRe,EAAU,aATE,gDAYdE,EAAS,EAAD,IACRF,EAAU,YAbI,yDAAH,qDAgBfI,GACD,CACF,GAAE,CAACD,IAEW,SAAXJ,GACK,oCAGM,YAAXA,GACK,SAACQ,EAAA,EAAD,IAGM,aAAXR,GACK,uBAAIE,IAGE,aAAXF,GAEA,+BACE,SAACX,EAAD,UACGD,EAAKqB,KAAI,gBAAG7B,EAAH,EAAGA,GAAI8B,EAAP,EAAOA,aAAcC,EAArB,EAAqBA,KAAMC,EAA3B,EAA2BA,UAA3B,OACR,UAACrB,EAAD,YACE,SAACC,EAAD,CACEqB,IACEH,EAAY,0CAC2BA,GACnC,+FAENI,IAAKH,KAEP,SAAClB,EAAD,UAAekB,KACf,UAACjB,EAAD,yBAAyBkB,OAVRhC,EADX,aAJlB,CAsBD,C,sDC5EM,IAAMK,EAAU,kC","sources":["components/API/FetchMovieCast.jsx","components/Cast/Cast.Styled.js","components/Cast/Cast.jsx","components/Key/TMDBKey.js"],"sourcesContent":["import axios from 'axios';\nimport { API_KEY } from '../Key/TMDBKey';\n\nconst fetchMovieCast = async id => {\n  const BASE_URL = `https://api.themoviedb.org/3/movie/${id}/credits`;\n  const response = await axios.get(BASE_URL, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return response.data.cast;\n};\n\nexport default fetchMovieCast;\n","import styled from 'styled-components';\n\nexport const StyledCast = styled.ul`\n\n    display: flex;\n    flex-wrap: wrap;\n    justify-content: center;\n    align-items: center;\n   \n    padding: 0;\n    margin: 0;\n    list-style: none;\n`;\n\nexport const StyledCastLi = styled.li`\n\n    display: flex;\n    flex-direction: column;\n    width: 200px;\n    height: 500px;\n    margin-bottom: 2rem;\n    margin-right: 2rem;\n    text-decoration: none;\n    color: black;\n    font-size: 1.2rem;\n    box-shadow: 0 0 10px rgba(0,0,0,0.5);\n    border-radius: 4px;\n`;\n\nexport const StyledCastImg = styled.img`\n    width: 200px;\n    height: 300px;\n    object-fit: cover;\n    border-radius: 5px;\n    margin-bottom: 0.5rem;\n    border-radius: 4px;\n    border-bottom: 1px solid #ccc;\n\n`;\n\nexport const StyledCastH3 = styled.h3`\n    text-align: center;\n    font-size: 1.5rem;\n    margin-bottom: 1rem;\n    width: 200px;\n`;\n\nexport const StyledCastP = styled.p`\n    text-align: center;\n    font-size: 1.2rem;\n    margin-bottom: 1rem;\n    width: 200px;\n`;\n\n","import fetchMovieCast from 'components/API/FetchMovieCast';\nimport { Loader } from 'components/Loader/Loader';\nimport { Report } from 'notiflix';\nimport {\n  StyledCast,\n  StyledCastH3,\n  StyledCastImg,\n  StyledCastLi,\n  StyledCastP,\n} from './Cast.Styled';\nconst { useState, useEffect } = require('react');\nconst { useParams } = require('react-router-dom');\n\nconst Cast = () => {\n  const [cast, setCast] = useState(null);\n  const [status, setStatus] = useState('idle');\n  const [error, setError] = useState('');\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    if (movieId) {\n      setStatus('pending');\n      const fetchCast = async () => {\n        try {\n          const response = await fetchMovieCast(movieId);\n          if (response.length === 0) {\n            setStatus('idle');\n            Report.info('No cast found');\n          }\n          if (response.length !== 0) {\n            setCast(response);\n            setStatus('resolved');\n          }\n        } catch (error) {\n          setError(error);\n          setStatus('rejected');\n        }\n      };\n      fetchCast();\n    }\n  }, [movieId]);\n\n  if (status === 'idle') {\n    return <> </>;\n  }\n\n  if (status === 'pending') {\n    return <Loader />;\n  }\n\n  if (status === 'rejected') {\n    return <p>{error}</p>;\n  }\n\n  if (status === 'resolved') {\n    return (\n      <>\n        <StyledCast>\n          {cast.map(({ id, profile_path, name, character }) => (\n            <StyledCastLi key={id}>\n              <StyledCastImg\n                src={\n                  profile_path\n                    ? `https://image.tmdb.org/t/p/w500/${profile_path}`\n                    : 'https://www.publicdomainpictures.net/pictures/280000/velka/not-found-image-15383864787lu.jpg'\n                }\n                alt={name}\n              />\n              <StyledCastH3>{name}</StyledCastH3>\n              <StyledCastP>Character: {character}</StyledCastP>\n            </StyledCastLi>\n          ))}\n        </StyledCast>\n      </>\n    );\n  }\n};\nexport default Cast;\n","export const API_KEY = '7eb5059eee6f318692a5fcd674d6cc43';\n\n"],"names":["fetchMovieCast","id","BASE_URL","axios","params","api_key","API_KEY","response","data","cast","StyledCast","styled","StyledCastLi","StyledCastImg","StyledCastH3","StyledCastP","require","useState","useEffect","useParams","setCast","status","setStatus","error","setError","movieId","fetchCast","length","Report","Loader","map","profile_path","name","character","src","alt"],"sourceRoot":""}